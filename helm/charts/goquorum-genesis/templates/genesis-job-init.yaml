---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "goquorum-genesis.name" . }}-init
  labels:
    app.kubernetes.io/name: goquorum-genesis-job
    app.kubernetes.io/component: genesis-job
    app.kubernetes.io/part-of: {{ include "goquorum-genesis.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/managed-by: helm
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook-delete-policy: "hook-succeeded"
spec:
  backoffLimit: 3
  completions: 1
  template:
    metadata:
      labels:    
        app.kubernetes.io/name: goquorum-genesis-job
        app.kubernetes.io/component: genesis-job
        app.kubernetes.io/part-of: {{ include "goquorum-genesis.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/managed-by: helm
    spec:
      serviceAccountName: {{ include "goquorum-genesis.name" . }}-sa
      restartPolicy: "Never"
      containers:
        - name: generate-genesis
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          securityContext:
            runAsUser: 0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -c
          args:
            - |
              #!/bin/bash
              echo "Creating config ..."

              function safeWriteSecret {
                local key=$1
                local fpath=$2
                kubectl create secret generic "${key}-keys" --namespace "{{ .Release.Namespace }}" \
                  --from-file=nodekey="${fpath}/nodekey" \
                  --from-file=nodekey.pub="${fpath}/nodekey.pub" \
                  --from-file=enode="${fpath}/nodekey.pub" \
                  --from-file=accountPrivate.key="${fpath}/accountPrivateKey" \
                  --from-file=accountPassword="${fpath}/accountPassword" \
                  --from-file=accountKeystore="${fpath}/accountKeystore" \
                  --from-file=accountAddress="${fpath}/accountAddress"
              }

              function safeWriteGenesisConfigmap {
                local folder_path=$1
                if ! kubectl get configmap --namespace "{{ .Release.Namespace }}" goquorum-genesis; then
                  kubectl create configmap --namespace "{{ .Release.Namespace }}" goquorum-genesis \
                    --from-file=genesis.json="${folder_path}/goQuorum/genesis.json"
                fi
              }

              function safeWriteQuorumPeersConfigmap {
                if ! kubectl get configmap --namespace "{{ .Release.Namespace }}" goquorum-peers; then
                  kubectl create configmap --namespace "{{ .Release.Namespace }}" goquorum-peers \
                    --from-file=static-nodes.json="/generated-config/static-nodes.json"
                fi
              }

              # Generate the FOLDER_PATH using the quorum-genesis-tool
              FOLDER_PATH=$(quorum-genesis-tool --consensus qbft --validators 4 --members 0 --bootnodes 0 --chainID 1337 \
                --blockperiod 10 --emptyBlockPeriod 60 --epochLength 30000 --requestTimeout 30 --difficulty 0x1 \
                --gasLimit 0x47b760 --coinbase 0x0000000000000000000000000000000000000000 --accountPassword password \
                --quickstartDevAccounts false --alloc '{}' --outputPath /generated-config | tail -1 | sed -e "s/^Artifacts in folder: //")

              echo "$FOLDER_PATH"
              echo "Creating genesis configmap in k8s ..."
              safeWriteGenesisConfigmap "$FOLDER_PATH"

              # create the static-nodes with proper dns names for the quorum nodes  
              echo "[" > /generated-config/static-nodes.json

              # 0 index so setting this to the num of validators
              echo "Creating validator keys ..."
              i=1
              for f in $(find "$FOLDER_PATH" -type d -iname "validator*" -exec basename {} \;); do
                echo "$f"

                if [ -d "${FOLDER_PATH}/${f}" ]; then
                  echo "Creating keys for $f ..."

                  echo "Using cloud native services"
                  safeWriteSecret "goquorum-node-validator-${i}-nodekey" "${FOLDER_PATH}/${f}/nodekey"
                  safeWriteSecret "goquorum-node-validator-${i}-nodekeypub" "${FOLDER_PATH}/${f}/nodekey.pub"
                  safeWriteSecret "goquorum-node-validator-${i}-enode" "${FOLDER_PATH}/${f}/nodekey.pub"
                  safeWriteSecret "goquorum-node-validator-${i}-address" "${FOLDER_PATH}/${f}/address"
                  kubectl create configmap --namespace "{{ .Release.Namespace }}" "goquorum-node-validator-${i}-address" \
                    --from-file=address="${FOLDER_PATH}/${f}/address"

                  safeWriteSecret "goquorum-node-validator-${i}-accountPrivateKey" "${FOLDER_PATH}/${f}/accountPrivateKey"
                  safeWriteSecret "goquorum-node-validator-${i}-accountPassword" "${FOLDER_PATH}/${f}/accountPassword"
                  safeWriteSecret "goquorum-node-validator-${i}-accountKeystore" "${FOLDER_PATH}/${f}/accountKeystore"
                  safeWriteSecret "goquorum-node-validator-${i}-accountAddress" "${FOLDER_PATH}/${f}/accountAddress"

                  # add to the static-nodes
                  pubkey=$(cat "${FOLDER_PATH}/${f}/nodekey.pub")
                  echo ",\"enode://${pubkey}@goquorum-node-validator-$i-0.goquorum-node-validator-$i.{{ .Release.Namespace }}.svc.cluster.local:30303?discport=0\"" >> /generated-config/static-nodes.json

                  i=$((i + 1))
                fi
              done

              echo "]" >> /generated-config/static-nodes.json
              # remove the extra comma to make it valid json
              sed -i '0,/,/s///' /generated-config/static-nodes.json
              safeWriteQuorumPeersConfigmap

              echo "Completed ..."
